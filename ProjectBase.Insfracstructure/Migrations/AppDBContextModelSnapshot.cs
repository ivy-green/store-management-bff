// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectBase.Insfracstructure.Data;

#nullable disable

namespace ProjectBase.Insfrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectBase.Domain.Entities.Bill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("1b20e912-0e35-44c6-be51-3120ae5048cd");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 30, 18, 737, DateTimeKind.Utc).AddTicks(8837));

                    b.Property<string>("CustomerFullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerUsername")
                        .HasColumnType("text");

                    b.Property<double>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Log")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShipperUsername")
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ShipperUsername");

                    b.HasIndex("Username");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.BillDetails", b =>
                {
                    b.Property<string>("BillId")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("BillId", "ProductName");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Blacklist", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("68b90fbd-9a87-4277-809f-73422c634c09");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Branch", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("6e0ce4ef-172b-481f-9429-a7efb0e02789");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = "test",
                            Code = 0,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Default branch"
                        });
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Coupon", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("cf90d3ea-8126-4f15-ac50-4808c7146ce1");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 30, 18, 742, DateTimeKind.Utc).AddTicks(1388));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("abd93545-3485-471c-9da0-de47fd0602e4");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorUsername")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<int>("ProductTypeCode")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUsername");

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.ProductCoupon", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("CouponId")
                        .HasColumnType("text");

                    b.HasKey("ProductId", "CouponId");

                    b.HasIndex("CouponId")
                        .IsUnique();

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductCoupons");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.ProductOnSale", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId", "BranchId");

                    b.ToTable("ProductOnSales");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.ProductType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 30, 18, 737, DateTimeKind.Utc).AddTicks(4667));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Code = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Manager"
                        },
                        new
                        {
                            Code = 3,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Staff"
                        },
                        new
                        {
                            Code = 4,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Shipper"
                        },
                        new
                        {
                            Code = 5,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.StatisticBill", b =>
                {
                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateOnly(2024, 9, 11));

                    b.Property<int>("BillQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ProductQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<double>("Revenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.HasKey("Date");

                    b.ToTable("StatisticBills");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Bio")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasDefaultValue("");

                    b.Property<string>("BranchID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 30, 18, 735, DateTimeKind.Utc).AddTicks(6238));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsAccountBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ReportToId")
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetPasswordTokenExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TokenExpiredTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("VerifyToken")
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.HasIndex("BranchID");

                    b.HasIndex("ReportToId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "admin",
                            Bio = "",
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            Fullname = "admin",
                            IsAccountBlocked = false,
                            IsEmailConfirmed = false,
                            PasswordHash = "29bb9e004a0efd038f405392d21bfed74e800a705a708cf21e3f4a6b86fe8e47",
                            PasswordSalt = "28fd1e9ee04e431277f4aabbf620953ca374e5190e0d59404671b0324b72eaee",
                            PhoneNumber = "",
                            ResetPasswordToken = "123123123124243434",
                            VerifyToken = ""
                        },
                        new
                        {
                            Username = "manager",
                            Bio = "",
                            BranchID = "test",
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager@gmail.com",
                            Fullname = "manager's full name",
                            IsAccountBlocked = false,
                            IsEmailConfirmed = false,
                            PasswordHash = "29bb9e004a0efd038f405392d21bfed74e800a705a708cf21e3f4a6b86fe8e47",
                            PasswordSalt = "28fd1e9ee04e431277f4aabbf620953ca374e5190e0d59404671b0324b72eaee",
                            PhoneNumber = "",
                            ResetPasswordToken = "",
                            VerifyToken = ""
                        },
                        new
                        {
                            Username = "staff",
                            Bio = "",
                            BranchID = "test",
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@gmail.com",
                            Fullname = "staff name",
                            IsAccountBlocked = false,
                            IsEmailConfirmed = false,
                            PasswordHash = "29bb9e004a0efd038f405392d21bfed74e800a705a708cf21e3f4a6b86fe8e47",
                            PasswordSalt = "28fd1e9ee04e431277f4aabbf620953ca374e5190e0d59404671b0324b72eaee",
                            PhoneNumber = "",
                            ReportToId = "manager",
                            ResetPasswordToken = "",
                            VerifyToken = ""
                        });
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleCode")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 30, 18, 736, DateTimeKind.Utc).AddTicks(3960));

                    b.HasKey("RoleCode", "Username");

                    b.HasIndex("Username");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleCode = 1,
                            Username = "admin",
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleCode = 2,
                            Username = "manager",
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleCode = 3,
                            Username = "staff",
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Bill", b =>
                {
                    b.HasOne("ProjectBase.Domain.Entities.User", "Shipper")
                        .WithMany()
                        .HasForeignKey("ShipperUsername")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectBase.Domain.Entities.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.BillDetails", b =>
                {
                    b.HasOne("ProjectBase.Domain.Entities.Bill", null)
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Product", b =>
                {
                    b.HasOne("ProjectBase.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBase.Domain.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.ProductCoupon", b =>
                {
                    b.HasOne("ProjectBase.Domain.Entities.Coupon", "Coupon")
                        .WithOne()
                        .HasForeignKey("ProjectBase.Domain.Entities.ProductCoupon", "CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBase.Domain.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("ProjectBase.Domain.Entities.ProductCoupon", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.User", b =>
                {
                    b.HasOne("ProjectBase.Domain.Entities.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ProjectBase.Domain.Entities.User", "ReportTo")
                        .WithOne()
                        .HasForeignKey("ProjectBase.Domain.Entities.User", "ReportToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("ReportTo");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ProjectBase.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectBase.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Bill", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProjectBase.Domain.Entities.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
